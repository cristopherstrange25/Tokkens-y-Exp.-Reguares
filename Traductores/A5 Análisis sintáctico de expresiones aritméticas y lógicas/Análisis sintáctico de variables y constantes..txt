import ply.lex as lex

# Lista de tokens
tokens = [
    'IDENTIFIER', 'INTEGER', 'FLOAT', 'STRING',  # Identificadores y literales
    'ENTERO', 'FLOTANTE', 'BOOLEANO', 'CADENA',  # Tipos
    'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'MODULO',  # Operadores aritméticos
    'ASSIGN',  # Operador de asignación
    'SEMICOLON',  # Otros símbolos
    'LPAREN', 'RPAREN', 'LBRACE', 'RBRACE', 'LBRACKET', 'RBRACKET',  # Paréntesis, llaves y corchetes
]

# Palabras clave (tipos) del lenguaje
reserved = {
    'entero': 'ENTERO',
    'flotante': 'FLOTANTE',
    'booleano': 'BOOLEANO',
    'cadena': 'CADENA',
}

# Agregar las palabras clave como tokens
tokens += list(reserved.values())

# Reglas para los tokens
t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_MODULO = r'%'
t_ASSIGN = r'='

t_LPAREN = r'\('
t_RPAREN = r'\)'
t_LBRACE = r'\{'
t_RBRACE = r'\}'
t_LBRACKET = r'\['
t_RBRACKET = r'\]'

t_SEMICOLON = r';'

# Reglas complejas

# Identificadores (pueden ser palabras clave o identificadores normales)
def t_IDENTIFIER(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    t.type = reserved.get(t.value, 'IDENTIFIER')  # Verificar si es palabra clave
    return t

# Reglas para los tipos
def t_ENTERO(t):
    r'entero'
    return t

def t_FLOTANTE(t):
    r'flotante'
    return t

def t_BOOLEANO(t):
    r'booleano'
    return t

def t_CADENA(t):
    r'cadena'
    return t

def t_FLOAT(t):
    r'\d+\.\d+'  # Número con punto decimal
    t.value = float(t.value)
    return t

def t_INTEGER(t):
    r'\d+'  # Número entero
    t.value = int(t.value)
    return t

def t_STRING(t):
    r'"([^"\\]|\\.)*"'  # Cadena entre comillas dobles
    t.value = t.value[1:-1]  # Eliminar las comillas
    return t

# Comentarios
def t_COMMENT(t):
    r'//.*|/\*[\s\S]*?\*/'  # Comentarios de una línea y múltiples líneas
    pass  # Ignorar comentarios

# Ignorar espacios y tabulaciones
t_ignore = ' \t'

# Ignorar nuevas líneas (pero contar las líneas para depuración)
def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)

# Manejo de errores
def t_error(t):
    print(f"Error sintáctico: Caracter ilegal '{t.value[0]}' en la línea {t.lexer.lineno}")
    t.lexer.skip(1)

# Construir el lexer
lexer = lex.lex()

# Función para probar el lexer
def probar_lexer(data):
    lexer.input(data)
    while True:
        tok = lexer.token()
        if not tok:
            break
        print(tok)

# Ejemplo de prueba
entrada = '''
entero x;
flotante y;
booleano activo;
cadena nombre;
entero 123x;  // Error: Identificador inválido
flotante y  // Error: Falta punto y coma
'''

probar_lexer(entrada)
